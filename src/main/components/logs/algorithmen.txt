Search algorithms 		linear search
Sorting Algorithms
Three Traversal Algorithms 
Dynamic Programming
Divide and Conquer Algorithms


lib/aether-api-0.9.0.M2.jar.jar lib/aether-impl-0.9.0.M2.jar.jar lib/aether-spi-0.9.0.M2.jar lib/aether-util-1.0.0.v20140518.jar lib/aopalliance-1.0.jar lib/asm-3.3.1.jar lib/asm-9.3.jar lib/cdi-api-1.0.jar lib/commons-beanutils-1.7.0.jar lib/commons-chain-1.1.jar lib/commons-codec-1.11.jar lib/commons-collections4-4.2.jar lib/commons-collections-3.2.2.jar lib/commons-compress-1.21.jar lib/commons-digester-1.8.jar lib/commons-io-2.11.0.jar lib/commons-lang3-3.8.1.jar lib/commons-lang-2.4.jar lib/commons-logging-1.2.jar lib/commons-text-1.3.jar lib/dom4j-1.1.jar lib/doxia-core-1.11.1.jar lib/doxia-decoration-model-1.11.1.jar lib/doxia-integration-tools-1.11.1.jar lib/doxia-logging-api-1.11.1.jar lib/doxia-module-xhtml5-1.11.1.jar lib/doxia-module-xhtml-1.11.1.jar lib/doxia-sink-api-1.11.1.jar lib/doxia-site-renderer-1.11.1.jar lib/doxia-skin-model-1.11.1.jar lib/google-collections-1.0.jar lib/guava-10.0.1.jar lib/httpclient-4.5.13.jar lib/httpcore-4.4.14.jar lib/javax.inject-1.jar lib/jsr250-api-1.0.jar lib/jsr305-1.3.9.jar lib/maven-aether-provider-3.1.0.jar lib/maven-artifact-3.1.0.jar lib/maven-artifact-transfer-0.13.1.jar lib/maven-common-artifact-filters-3.3.2.jar lib/maven-core-3.1.0.jar lib/maven-dependency-analyzer-1.13.0.jar lib/maven-dependency-plugin-3.5.0.jar lib/maven-dependency-tree-3.2.1.jar lib/maven-model-3.1.0.jar lib/maven-model-builder-3.1.0.jar lib/maven-plugin-api-3.1.0.jar lib/maven-reporting-api-3.1.1.jar lib/maven-reporting-impl-3.2.0.jar lib/maven-repository-metadata-3.1.0.jar lib/maven-settings-3.1.0.jar lib/maven-settings-builder-3.1.0.jar lib/maven-shared-utils-3.3.4.jar lib/org.eclipse.sisu.inject-0.0.0.M2a.jar lib/org.eclipse.sisu.plexus-0.0.0.M2a.jar lib/oro-2.0.8.jar lib/plexus-archiver-4.6.0.jar lib/plexus-build-api-0.0.7.jar lib/plexus-cipher-1.4.jar lib/plexus-classworlds-2.4.2.jar lib/plexus-component-annotations-2.0.0.jar lib/plexus-container-default-2.1.0.jar lib/plexus-i18n-1.0-beta-10.jar lib/plexus-interpolation-1.16.jar lib/plexus-io-3.4.0.jar lib/plexus-sec-dispatcher-1.3.jar lib/plexus-utils-3.5.0.jar lib/plexus-velocity-1.2.jar lib/sisu-guice-3.1.0-no_aop.jar lib/slf4j-api-1.7.36.jar lib/snappy-0.4.jar lib/velocity-1.7.jar lib/velocity-tools-2.0.jar lib/xbean-reflect-3.7.jar lib/xz-1.9.jar lib/zstd-jni-1.5.2-5.jar

import java.lang.Character;

class SqueakyClean {
    static String clean(String identifier) {
        StringBuilder newIdentifier = new StringBuilder();

        for (char c : identifier.toCharArray()) {
            if (c == ' ') {
                newIdentifier.append('_');
            } else if (Character.isISOControl(c)) {
                newIdentifier.append("CTRL");
                if (newIdentifier.length() > 0) {
                    if (Character.isLowerCase()) {
                        newIdentifier.setCharAt(0, Character.toLowerCase(newIdentifier.charAt(0)));
                    } else {
                        newIdentifier.setCharAt(0, Character.toUpperCase(newIdentifier.charAt(0)));
                    }
                }
            } else if (!Character.isLetter(c)) {
                // do nothing, skip this character
            } else if (Character.UnicodeBlock.of(c) == Character.UnicodeBlock.GREEK ||
                Character.UnicodeBlock.of(c) == Character.UnicodeBlock.GREEK_EXTENDED ||
                (Character.UnicodeBlock.of(c) == Character.UnicodeBlock.BASIC_LATIN &&
                Character.UnicodeBlock.of(Character.toLowerCase(c)) == Character.UnicodeBlock.GREEK)) {
                // replace Greek letters with empty string
                if (Character.isLowerCase(c)) {
                    // skip lower case Greek letters
                    continue;
                } else if (Character.isUpperCase(c)) {
                    // append upper case Greek letters
                    newIdentifier.append(Character.toUpperCase(c));
                }
            } else {
                newIdentifier.append(c);
            }
        }
    
        return newIdentifier.toString();
    }
}


SPRING

start up a Spring root application context through its ContextLoaderListener, and access it through its ServletContext attribute

